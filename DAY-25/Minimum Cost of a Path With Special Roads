class Solution {
    public int minimumCost(int[] start, int[] target, int[][] specialRoads) {
        return fun(start, target, start[0],start[1],specialRoads, new Integer[target[0]][target[1]]);
    }
    int fun(int[] st, int[] tar, int i, int j, int[][] sp, Integer[][] dp){
        if(i==tar[0] || j==tar[1])return 0;
        
        if(dp[i][j]!=null)return dp[i][j];
        // not take a special road
        int ans=dist(i,j,tar[0],tar[1])+fun(st,tar,tar[0],tar[1],sp,dp);
        for(int[] spp: sp){
            if(i<=spp[0] && j<=spp[1]){
                //take special road
                int chooseRoad = dist(i,j,spp[0],spp[1])+spp[4]+fun(st,tar,spp[2],spp[3],sp, dp);
                ans = Math.min(chooseRoad, ans);
            }
        }
        return dp[i][j] = ans;
    }
    int dist(int a, int b, int x, int y){
        return Math.abs(a-x)+Math.abs(b-y);
    }
}
